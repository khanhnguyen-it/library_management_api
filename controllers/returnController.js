const db = require('../utils/db');

// Format JS Date ‚Üí MySQL DATETIME
const formatDateTime = (date) => date.toISOString().slice(0, 19).replace('T', ' ');

exports.createReturn = async (req, res) => {
    const { borrowing_id, document_items, processed_by, notes } = req.body;

    if (!borrowing_id || !Array.isArray(document_items) || document_items.length === 0) {
        return res.status(400).json({ message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' });
    }

    try {
        // 1. Ki·ªÉm tra phi·∫øu m∆∞·ª£n t·ªìn t·∫°i
        const [borrowings] = await db.query(`SELECT * FROM borrowings WHERE borrowing_id = ?`, [borrowing_id]);
        if (borrowings.length === 0) return res.status(404).json({ message: 'Phi·∫øu m∆∞·ª£n kh√¥ng t·ªìn t·∫°i' });

        const borrowing = borrowings[0];

        // 2. T√≠nh s·ªë ng√†y tr·ªÖ
        const today = new Date();
        const dueDate = new Date(borrowing.due_date);
        const lateDays = Math.max(Math.floor((today - dueDate) / (1000 * 60 * 60 * 24)), 0);

        // 3. T√≠nh t·ªïng ti·ªÅn ph·∫°t v√† tr·∫°ng th√°i
        let totalFine = 0;
        let returnStatus = 'ON_TIME';

        for (const item of document_items) {
            if (item.status === 'DAMAGED' || item.status === 'LOST') {
                totalFine += 50000; // gi·∫£ ƒë·ªãnh ph·∫°t h∆∞/m·∫•t l√† 50k/t√†i li·ªáu
                returnStatus = item.status;
            }
        }

        if (lateDays > 0) {
            totalFine += lateDays * 5000; // gi·∫£ ƒë·ªãnh ph·∫°t tr·ªÖ 5k/ng√†y
            if (returnStatus === 'ON_TIME') returnStatus = 'LATE';
        }

        // 4. T·∫°o phi·∫øu tr·∫£
        const returnDate = formatDateTime(today);
        const [result] = await db.query(
            `INSERT INTO returns (borrowing_id, return_date, late_days, fine_amount, status, processed_by, notes)
       VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [borrowing_id, returnDate, lateDays, totalFine, returnStatus, processed_by, notes]
        );
        const return_id = result.insertId;

        // 5. Ghi v√†o returns_detail v√† c·∫≠p nh·∫≠t b·∫£n sao
        for (const item of document_items) {
            await db.query(
                `INSERT INTO returns_detail 
        (return_id, document_item_id, status, actual_return_date, damage_reason) 
         VALUES (?, ?, ?, ?, ?)`,
                [return_id, item.document_item_id, item.status, returnDate, item.damage_reason || null]
            );

            // Tr·∫£ l·∫°i t√†i li·ªáu v·ªÅ tr·∫°ng th√°i AVAILABLE (n·∫øu kh√¥ng m·∫•t)
            if (item.status !== 'LOST') {
                await db.query(
                    `UPDATE document_items SET availability_status = 'AVAILABLE' WHERE document_item_id = ?`,
                    [item.document_item_id]
                );
            }
        }

        // üîÅ HO√ÄN C·ªåC n·∫øu tr·∫£ ƒë√∫ng v√† kh√¥ng vi ph·∫°m
        for (const item of document_items) {
            if (item.status === 'GOOD') {
                const refundAmount = -10000; // ho√†n c·ªçc l√† s·ªë √¢m

                const [paymentResult] = await db.query(
                    `INSERT INTO payments (account_id, amount, method, status, notes)
             VALUES (?, ?, 'CASH', 'COMPLETED', ?)`,
                    [borrowing.account_id, refundAmount, `Ho√†n c·ªçc t√†i li·ªáu ID ${item.document_item_id}`]
                );

                const payment_id = paymentResult.insertId;

                await db.query(
                    `INSERT INTO payments_returns (payment_id, return_id, notes)
             VALUES (?, ?, ?)`,
                    [payment_id, return_id, `Ho√†n c·ªçc khi tr·∫£ t√†i li·ªáu ID ${item.document_item_id}`]
                );
            }
        }


        // 6. C·∫≠p nh·∫≠t phi·∫øu m∆∞·ª£n th√†nh "RETURNED"
        await db.query(
            `UPDATE borrowings SET status = 'RETURNED', returned_date = ? WHERE borrowing_id = ?`,
            [returnDate, borrowing_id]
        );

        // 7. N·∫øu c√≥ vi ph·∫°m ‚Üí ghi nh·∫≠n
        if (totalFine > 0) {
            await db.query(
                `INSERT INTO violations (account_id, borrowing_id, violation_date, description, fine_amount, status)
         VALUES (?, ?, ?, ?, ?, 'PENDING')`,
                [borrowing.account_id, borrowing_id, returnDate, 'Vi ph·∫°m khi tr·∫£ t√†i li·ªáu', totalFine]
            );
        }

        return res.status(201).json({
            message: 'Tr·∫£ t√†i li·ªáu th√†nh c√¥ng',
            return_id,
            late_days: lateDays,
            fine_amount: totalFine,
            status: returnStatus
        });

    } catch (err) {
        console.error('L·ªói khi x·ª≠ l√Ω tr·∫£ t√†i li·ªáu:', err);
        return res.status(500).json({ message: 'L·ªói server', error: err.message });
    }
};

exports.getAllReturns = async (req, res) => {
    try {
        const [rows] = await db.query(`SELECT * FROM returns ORDER BY return_date DESC`);
        return res.status(200).json(rows);
    } catch (err) {
        console.error('L·ªói khi l·∫•y danh s√°ch phi·∫øu tr·∫£:', err);
        return res.status(500).json({ message: 'L·ªói h·ªá th·ªëng', error: err.message });
    }
};

exports.getReturnById = async (req, res) => {
    const { id } = req.params;
    try {
        const [rows] = await db.query(`SELECT * FROM returns WHERE return_id = ?`, [id]);
        if (rows.length === 0) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y phi·∫øu tr·∫£' });
        return res.status(200).json(rows[0]);
    } catch (err) {
        console.error('L·ªói khi l·∫•y phi·∫øu tr·∫£ theo ID:', err);
        return res.status(500).json({ message: 'L·ªói h·ªá th·ªëng', error: err.message });
    }
};

exports.getReturnsByAccount = async (req, res) => {
    const { account_id } = req.params;
    try {
        const [rows] = await db.query(
            `SELECT r.* FROM returns r
             JOIN borrowings b ON r.borrowing_id = b.borrowing_id
             WHERE b.account_id = ?
             ORDER BY r.return_date DESC`,
            [account_id]
        );
        return res.status(200).json(rows);
    } catch (err) {
        console.error('L·ªói khi l·∫•y danh s√°ch phi·∫øu tr·∫£ theo account:', err);
        return res.status(500).json({ message: 'L·ªói h·ªá th·ªëng', error: err.message });
    }
};
